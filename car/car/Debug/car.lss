
car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072c  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066d  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ea  00000000  00000000  00000f91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000127c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000387  00000000  00000000  000012a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e0  00000000  00000000  00001627  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001707  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

	/**
	 * We will be using OCR1A as our PWM output which is the
	 * same pin as PB1.
	 */
	DDRB |= _BV(PB1);
  80:	21 9a       	sbi	0x04, 1	; 4
	 * a compare value (which will be explained below).  CS10 being
	 * set simply turns the timer on without a prescaler (so at full
	 * speed).  The timer is used to determine when the PWM pin should be
	 * on and when it should be off.
	 */
	TCCR1A |= _BV(COM1A1) | _BV(WGM10);
  82:	e0 e8       	ldi	r30, 0x80	; 128
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	80 81       	ld	r24, Z
  88:	81 68       	ori	r24, 0x81	; 129
  8a:	80 83       	st	Z, r24
	TCCR1B |= _BV(CS10) | _BV(WGM12);
  8c:	e1 e8       	ldi	r30, 0x81	; 129
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	89 60       	ori	r24, 0x09	; 9
  94:	80 83       	st	Z, r24
	 */
	uint8_t pwm = 0x00;
	bool up = true;
	for(;;) {

		OCR1A = pwm;
  96:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  9a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
	 *  of time that the pin will be high.  Given this it isn't too hard
	 *  to see what when the pwm value is at 0x00 the LED will be off
	 *  and when it is 0xff the LED will be at its brightest.
	 */
	uint8_t pwm = 0x00;
	bool up = true;
  9e:	21 e0       	ldi	r18, 0x01	; 1
	 *  Effectively this means that the ratio of pwm / 255 is the percentage
	 *  of time that the pin will be high.  Given this it isn't too hard
	 *  to see what when the pwm value is at 0x00 the LED will be off
	 *  and when it is 0xff the LED will be at its brightest.
	 */
	uint8_t pwm = 0x00;
  a0:	80 e0       	ldi	r24, 0x00	; 0
	bool up = true;
	for(;;) {

		OCR1A = pwm;

		pwm += up ? 1 : -1;
  a2:	91 e0       	ldi	r25, 0x01	; 1
	 */
	uint8_t pwm = 0x00;
	bool up = true;
	for(;;) {

		OCR1A = pwm;
  a4:	e8 e8       	ldi	r30, 0x88	; 136
  a6:	f0 e0       	ldi	r31, 0x00	; 0

		pwm += up ? 1 : -1;
		if (pwm == 0xff)
			up = false;
  a8:	70 e0       	ldi	r23, 0x00	; 0
	bool up = true;
	for(;;) {

		OCR1A = pwm;

		pwm += up ? 1 : -1;
  aa:	6f ef       	ldi	r22, 0xFF	; 255
		if (pwm == 0xff)
			up = false;
		else if (pwm == 0x00)
			up = true;
  ac:	31 e0       	ldi	r19, 0x01	; 1
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x36>
	bool up = true;
	for(;;) {

		OCR1A = pwm;

		pwm += up ? 1 : -1;
  b0:	96 2f       	mov	r25, r22
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <main+0x36>
  b4:	93 2f       	mov	r25, r19
  b6:	89 0f       	add	r24, r25
		if (pwm == 0xff)
  b8:	8f 3f       	cpi	r24, 0xFF	; 255
  ba:	e1 f0       	breq	.+56     	; 0xf4 <main+0x74>
			up = false;
		else if (pwm == 0x00)
  bc:	88 23       	and	r24, r24
  be:	69 f0       	breq	.+26     	; 0xda <main+0x5a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	a3 ec       	ldi	r26, 0xC3	; 195
  c2:	b9 e0       	ldi	r27, 0x09	; 9
  c4:	11 97       	sbiw	r26, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x44>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x4a>
  ca:	00 00       	nop
	 */
	uint8_t pwm = 0x00;
	bool up = true;
	for(;;) {

		OCR1A = pwm;
  cc:	48 2f       	mov	r20, r24
  ce:	50 e0       	ldi	r21, 0x00	; 0
  d0:	51 83       	std	Z+1, r21	; 0x01
  d2:	40 83       	st	Z, r20

		pwm += up ? 1 : -1;
  d4:	22 23       	and	r18, r18
  d6:	61 f3       	breq	.-40     	; 0xb0 <main+0x30>
  d8:	ed cf       	rjmp	.-38     	; 0xb4 <main+0x34>
  da:	a3 ec       	ldi	r26, 0xC3	; 195
  dc:	b9 e0       	ldi	r27, 0x09	; 9
  de:	11 97       	sbiw	r26, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x5e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x64>
  e4:	00 00       	nop
	 */
	uint8_t pwm = 0x00;
	bool up = true;
	for(;;) {

		OCR1A = pwm;
  e6:	48 2f       	mov	r20, r24
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	51 83       	std	Z+1, r21	; 0x01
  ec:	40 83       	st	Z, r20

		pwm += up ? 1 : -1;
		if (pwm == 0xff)
			up = false;
		else if (pwm == 0x00)
			up = true;
  ee:	23 2f       	mov	r18, r19
	bool up = true;
	for(;;) {

		OCR1A = pwm;

		pwm += up ? 1 : -1;
  f0:	93 2f       	mov	r25, r19
  f2:	e1 cf       	rjmp	.-62     	; 0xb6 <main+0x36>
  f4:	a3 ec       	ldi	r26, 0xC3	; 195
  f6:	b9 e0       	ldi	r27, 0x09	; 9
  f8:	11 97       	sbiw	r26, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x78>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x7e>
  fe:	00 00       	nop
	 */
	uint8_t pwm = 0x00;
	bool up = true;
	for(;;) {

		OCR1A = pwm;
 100:	48 2f       	mov	r20, r24
 102:	50 e0       	ldi	r21, 0x00	; 0
 104:	51 83       	std	Z+1, r21	; 0x01
 106:	40 83       	st	Z, r20

		pwm += up ? 1 : -1;
		if (pwm == 0xff)
			up = false;
 108:	27 2f       	mov	r18, r23
	bool up = true;
	for(;;) {

		OCR1A = pwm;

		pwm += up ? 1 : -1;
 10a:	96 2f       	mov	r25, r22
 10c:	d4 cf       	rjmp	.-88     	; 0xb6 <main+0x36>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
