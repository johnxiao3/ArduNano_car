
car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d9  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073b  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a0  00000000  00000000  00001240  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000015e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000395  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000182  00000000  00000000  000019c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001b4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <motor_move>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	9f ef       	ldi	r25, 0xFF	; 255
  82:	9a b9       	out	0x0a, r25	; 10
  84:	81 30       	cpi	r24, 0x01	; 1
  86:	29 f4       	brne	.+10     	; 0x92 <motor_move+0x12>
  88:	5a 9a       	sbi	0x0b, 2	; 11
  8a:	5b 98       	cbi	0x0b, 3	; 11
  8c:	5c 98       	cbi	0x0b, 4	; 11
  8e:	5d 9a       	sbi	0x0b, 5	; 11
  90:	08 95       	ret
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	29 f4       	brne	.+10     	; 0xa0 <motor_move+0x20>
  96:	5a 98       	cbi	0x0b, 2	; 11
  98:	5b 9a       	sbi	0x0b, 3	; 11
  9a:	5c 9a       	sbi	0x0b, 4	; 11
  9c:	5d 98       	cbi	0x0b, 5	; 11
  9e:	08 95       	ret
  a0:	81 11       	cpse	r24, r1
  a2:	04 c0       	rjmp	.+8      	; 0xac <motor_move+0x2c>
  a4:	5a 98       	cbi	0x0b, 2	; 11
  a6:	5b 98       	cbi	0x0b, 3	; 11
  a8:	5c 98       	cbi	0x0b, 4	; 11
  aa:	5d 98       	cbi	0x0b, 5	; 11
  ac:	08 95       	ret

000000ae <pwm_TC0_init>:
  ae:	83 ec       	ldi	r24, 0xC3	; 195
  b0:	84 bd       	out	0x24, r24	; 36
  b2:	85 e0       	ldi	r24, 0x05	; 5
  b4:	85 bd       	out	0x25, r24	; 37
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	8a b9       	out	0x0a, r24	; 10
  ba:	08 95       	ret

000000bc <main>:
	_delay_ms(1000);
}

int main(void)
{   
    pwm_TC0_init();     //to initialize PWM
  bc:	0e 94 57 00 	call	0xae	; 0xae <pwm_TC0_init>
    TCCR0B = 0b00000101;     //register TCCR1B // no scale
    DDRD = 0xff;     //set portd as output 
}
void turn(unsigned char i){
	if (i == 0)
		OCR0A = 215;     
  c0:	d7 ed       	ldi	r29, 0xD7	; 215
	else if (i == 1)
		OCR0A = 230;
  c2:	c6 ee       	ldi	r28, 0xE6	; 230
{   
    pwm_TC0_init();     //to initialize PWM

    while(1)
    {
		motor_move(STOP);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	0e 94 40 00 	call	0x80	; 0x80 <motor_move>
    TCCR0B = 0b00000101;     //register TCCR1B // no scale
    DDRD = 0xff;     //set portd as output 
}
void turn(unsigned char i){
	if (i == 0)
		OCR0A = 215;     
  ca:	d7 bd       	out	0x27, r29	; 39
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ed       	ldi	r24, 0xD3	; 211
  d0:	90 e3       	ldi	r25, 0x30	; 48
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x16>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x20>
  dc:	00 00       	nop

    while(1)
    {
		motor_move(STOP);
		turn(0);
		motor_move(FORWARD);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 40 00 	call	0x80	; 0x80 <motor_move>
  e4:	2f ef       	ldi	r18, 0xFF	; 255
  e6:	87 ea       	ldi	r24, 0xA7	; 167
  e8:	91 e6       	ldi	r25, 0x61	; 97
  ea:	21 50       	subi	r18, 0x01	; 1
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	90 40       	sbci	r25, 0x00	; 0
  f0:	e1 f7       	brne	.-8      	; 0xea <main+0x2e>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x38>
  f4:	00 00       	nop
        _delay_ms(2000);

		motor_move(STOP);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 40 00 	call	0x80	; 0x80 <motor_move>
}
void turn(unsigned char i){
	if (i == 0)
		OCR0A = 215;     
	else if (i == 1)
		OCR0A = 230;
  fc:	c7 bd       	out	0x27, r28	; 39
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	83 ed       	ldi	r24, 0xD3	; 211
 102:	90 e3       	ldi	r25, 0x30	; 48
 104:	21 50       	subi	r18, 0x01	; 1
 106:	80 40       	sbci	r24, 0x00	; 0
 108:	90 40       	sbci	r25, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <main+0x48>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <main+0x52>
 10e:	00 00       	nop
		motor_move(FORWARD);
        _delay_ms(2000);

		motor_move(STOP);
		turn(1);
		motor_move(FORWARD);
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	0e 94 40 00 	call	0x80	; 0x80 <motor_move>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	87 ea       	ldi	r24, 0xA7	; 167
 11a:	91 e6       	ldi	r25, 0x61	; 97
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x60>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x6a>
 126:	00 00       	nop
 128:	cd cf       	rjmp	.-102    	; 0xc4 <main+0x8>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
